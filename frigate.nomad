locals {
  nginx_configuration = trimspace(
    trimsuffix(
      trimspace(
        regex_replace(
          regex_replace(
            regex_replace(
              regex_replace(
                regex_replace(
                  regex_replace(
                    regex_replace(
                      regex_replace(
                        trimspace(
                          file("nginx.conf")
                        ),
                        "server\\s{\\s",      # remove server keyword and opening bracket (autogenerated in nginx nomad job)
                        ""
                      ),
                      "server_name\\s\\S+;",  # remove server_name directive (autogenerated in nginx nomad job)
                      ""
                    ),
                    "root\\s\\S+;",           # remove root directive (autogenerated in nginx nomad job)
                    ""
                  ),
                  "listen\\s.+;",             # remove listen directive  (autogenerated in nginx nomad job)
                  ""
                ),
                "#.+\\n",                     # remove comments (no semantic difference)
                ""
              ),
              ";\\s+",                        # remove whitespace after semicolons (no semantic difference)
              ";"
            ),
            "{\\s+",                          # remove whitespace after opening brackets (no semantic difference)
            "{"
          ),
          "\\s+",                             # replace any occurrence of one or more whitespace characters with single space (no semantic difference)
          " "
        )
      ),
      "}"                                     # remove trailing closing bracket (autogenerated in nginx nomad job)
    )
  )
}

job "frigate" {
  region = "campus"

  datacenters = ["cc"]

  type = "service"

  group "frigate" {
    volume "storage" {
      type = "host"
      source = "frigate"
      access_mode = "single-node-single-writer"
      attachment_mode = "file-system"
    }

    network {
      port "nginx-auth" {
        static = 8971
      }

      port "nginx-unauth" {
        static = 5000
      }

      port "api" {
        static = 5001
      }

      port "ws" {
        static = 5002
      }

      port "jsmpeg" {
        static = 8082
      }

      port "rtsp" {
        static = 8554
      }

      port "webrtc" {
        static = 8555
      }

      port "go2rtc" {
        static = 1984
      }
    }

    task "dump-assets" {
      driver = "docker"

      lifecycle {
        hook = "prestart"
      }

      config {
        image = "ghcr.io/blakeblackshear/frigate:stable"

        force_pull = true

        network_mode = "host"

        entrypoint = [
          "/bin/bash",
          "-xeuo",
          "pipefail",
          "-c",
          "mkdir --parents /assets/frigate-nginx/ && cp --recursive --verbose web/* /assets/frigate-nginx/"
        ]

        mount {
          type = "volume"
          target = "/assets/"
          source = "assets"
          readonly = false

          volume_options {
            no_copy = true
          }
        }
      }

      resources {
        cpu = 1000
        memory = 4096
        memory_max = 8192
      }
    }

    task "frigate" {
      driver = "docker"

      consul {}

      config {
        image = "ghcr.io/blakeblackshear/frigate:stable"

        force_pull = true

        network_mode = "host"

        shm_size = "1000000000"

        mount {
          type = "volume"
          target = "/config/"
          source = "frigate-db"
          readonly = false

          volume_options {
            no_copy = false
          }
        }

        mount {
          type = "tmpfs"
          target = "/tmp/cache"
          readonly = false
          tmpfs_options {
            size = 1000000000 # bytes
          }
        }

        mount {
          type   = "bind"
          source = "secrets/config.yml"
          target = "/config/config.yml"
        }
      }

      volume_mount {
        volume = "storage"
        destination = "/media/frigate/"
      }

      resources {
        cpu = 1000
        memory = 4096
        memory_max = 8192
      }

      service {
        name = "frigate-nginx"

        port = "nginx-unauth"

        address = "127.0.0.1"

        tags = [
          "http"
        ]

        check {
          success_before_passing = 3
          failures_before_critical = 2

          interval = "1s"

          name = "Nginx Health"
          path = "/index.html"
          port = "nginx-unauth"
          protocol = "http"
          timeout = "1s"
          type = "http"
        }

        check_restart {
          limit = 5
          grace = "30s"
        }

        meta {
          nginx-config = substr(local.nginx_configuration, 0, 511)
          nginx-config-1 = substr(local.nginx_configuration, 511, 511)
          nginx-config-2 = substr(local.nginx_configuration, 1022, 511)
          nginx-config-3 = substr(local.nginx_configuration, 1533, 511)
          nginx-config-4 = substr(local.nginx_configuration, 2044, 511)
          nginx-config-5 = substr(local.nginx_configuration, 2555, 511)
          nginx-config-6 = substr(local.nginx_configuration, 3066, 511)
          nginx-config-7 = substr(local.nginx_configuration, 3577, 511)
          nginx-config-8 = substr(local.nginx_configuration, 4088, 511)
          firewall-rules = jsonencode(["internet"])
        }
      }

      service {
        name = "frigate-ws"

        port = "ws"

        address = "127.0.0.1"

        tags = [
          "http"
        ]

        check {
          success_before_passing = 3
          failures_before_critical = 2

          interval = "1s"

          name = "TCP"
          port = "ws"
          timeout = "1s"
          type = "tcp"
        }

        check_restart {
          limit = 5
          grace = "60s"
        }
      }

      service {
        name = "frigate-jsmpeg"

        port = "jsmpeg"

        address = "127.0.0.1"

        tags = [
          "http"
        ]

        check {
          success_before_passing = 3
          failures_before_critical = 2

          interval = "1s"

          name = "TCP"
          port = "jsmpeg"
          timeout = "1s"
          type = "tcp"
        }

        check_restart {
          limit = 5
          grace = "60s"
        }
      }

      service {
        name = "frigate-api"

        port = "api"

        address = "127.0.0.1"

        tags = [
          "http"
        ]

        check {
          success_before_passing = 3
          failures_before_critical = 2

          interval = "1s"

          name = "API Health"
          path = "/"
          port = "api"
          protocol = "http"
          timeout = "1s"
          type = "http"
        }

        check_restart {
          limit = 5
          grace = "60s"
        }
      }

      service {
        name = "frigate-go2rtc"

        port = "go2rtc"

        address = "127.0.0.1"

        tags = [
          "http"
        ]

        check {
          success_before_passing = 3
          failures_before_critical = 2

          interval = "1s"

          name = "go2rtc Health"
          path = "/api"
          port = "go2rtc"
          protocol = "http"
          timeout = "1s"
          type = "http"
        }

        check_restart {
          limit = 5
          grace = "60s"
        }
      }

      template {
        data = <<EOH
{{- (key "frigate/config") | parseYAML | toYAML -}}
EOH

        destination = "secrets/config.yml"
      }

      restart {
        attempts = 1
        delay = "10s"
        interval = "1m"
        mode = "fail"
      }

      shutdown_delay = "60s"
    }
  }

  reschedule {
    delay = "10s"
    delay_function = "fibonacci"
    max_delay = "60s"
    unlimited = true
  }

  update {
    max_parallel = 0
  }
}
